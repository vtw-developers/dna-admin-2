<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.vtw.dna.apiinfo.repository.ApiInfoRepository">
  <select id="count">
    SELECT COUNT(*)
    FROM API_INFO A
    LEFT OUTER JOIN USERS U
      ON A.AUTHOR_ID = U.ID
    LEFT OUTER JOIN SERVICE_GROUP G
      ON A.SERVICE_GROUP_ID = G.ID
    <where>
      <if test="filter.name != null and filter.name != ''">
        AND A.NAME LIKE '%' || #{filter.name} || '%'
      </if>
      <if test="filter.httpMethod != null">
        AND A.HTTP_METHOD = #{filter.httpMethod}
      </if>
      <if test="filter.author != null and filter.author != ''">
        AND U.NAME LIKE '%' || #{filter.author} || '%'
      </if>
      <if test="filter.startModifiedTime != null">
        AND A.MODIFIED_TIME &gt;= #{filter.startModifiedTime}
      </if>
      <if test="filter.endModifiedTime != null">
        AND A.MODIFIED_TIME &lt;= #{filter.endModifiedTime}
      </if>
      <if test="filter.enabled != null">
        AND A.ENABLED = #{filter.enabled, typeHandler=BooleanToYnTypeHandler}
      </if>
      <if test="filter.serviceGroupId != null">
        AND G.ID = #{filter.serviceGroupId}
      </if>
    </where>
  </select>

  <select id="findAll" resultType="com.vtw.dna.apiinfo.dto.ApiInfoQuery">
    SELECT
      A.ID,
      A.NAME,
      A.HTTP_METHOD,
      A.URL,
      U.ID AS AUTHOR_ID,
      U.NAME AS AUTHOR_NAME,
      A.MODIFIED_TIME,
      A.ENABLED,
      G.ID AS SERVICE_GROUP_ID,
      G.NAME AS SERVICE_GROUP_NAME
    FROM API_INFO A
    LEFT OUTER JOIN USERS U
      ON A.AUTHOR_ID = U.ID
    LEFT OUTER JOIN SERVICE_GROUP G
      ON A.SERVICE_GROUP_ID = G.ID
    <where>
      <if test="filter.name != null and filter.name != ''">
        AND A.NAME LIKE '%' || #{filter.name} || '%'
      </if>
      <if test="filter.httpMethod != null">
        AND A.HTTP_METHOD = #{filter.httpMethod}
      </if>
      <if test="filter.author != null and filter.author != ''">
        AND U.NAME LIKE '%' || #{filter.author} || '%'
      </if>
      <if test="filter.startModifiedTime != null">
        AND A.MODIFIED_TIME &gt;= #{filter.startModifiedTime}
      </if>
      <if test="filter.endModifiedTime != null">
        AND A.MODIFIED_TIME &lt;= #{filter.endModifiedTime}
      </if>
      <if test="filter.enabled != null">
        AND A.ENABLED = #{filter.enabled, typeHandler=BooleanToYnTypeHandler}
      </if>
      <if test="filter.serviceGroupId != null">
        AND G.ID = #{filter.serviceGroupId}
      </if>
    </where>
    <if test="pageable.sort != null and !pageable.sort.isEmpty()">
      ORDER BY
      <foreach collection="pageable.sort" item="order" separator=",">
        <if test="order.property == 'name'">
          A.NAME
        </if>
        <if test="order.property == 'httpMethod'">
          A.HTTP_METHOD
        </if>
        <if test="order.property == 'url'">
          A.URL
        </if>
        <if test="order.property == 'enabled'">
          A.ENABLED
        </if>
        <if test="order.property == 'authorName'">
          U.NAME
        </if>
        <if test="order.property == 'modifiedTime'">
          A.MODIFIED_TIME
        </if>
        <if test="order.property == 'serviceGroupName'">
          G.NAME
        </if>
        ${order.direction}
      </foreach>
    </if>
    OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
  </select>

  <select id="findById" resultType="com.vtw.dna.apiinfo.dto.ApiInfoQuery">
    SELECT
      A.ID,
      A.NAME,
      A.HTTP_METHOD,
      A.URL,
      U.ID   AS AUTHOR_ID,
      U.NAME AS AUTHOR_NAME,
      A.MODIFIED_TIME,
      A.ENABLED,
      G.ID AS SERVICE_GROUP_ID,
      G.NAME AS SERVICE_GROUP_NAME
    FROM API_INFO A
    LEFT OUTER JOIN USERS U
      ON A.AUTHOR_ID = U.ID
    LEFT OUTER JOIN SERVICE_GROUP G
      ON A.SERVICE_GROUP_ID = G.ID
    WHERE A.ID = #{id}
  </select>

  <insert id="insert" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO API_INFO (
      NAME,
      HTTP_METHOD,
      URL,
      ENABLED,
      AUTHOR_ID,
      MODIFIED_TIME,
      SERVICE_GROUP_ID,
      REQUEST_PARAMETERS,
      RESPONSE_ELEMENTS,
      FLOW_META_YAML
    ) VALUES (
      #{name},
      #{httpMethod},
      #{url},
      #{enabled},
      #{authorId},
      now(),
      #{serviceGroupId},
      #{requestParameters, typeHandler=RequestParametersJsonTypeHandler},
      #{responseElements, typeHandler=ResponseElementsJsonTypeHandler},
      #{flowMetaYaml}
    )
  </insert>

  <update id="update">
    UPDATE API_INFO SET
      NAME             = #{name},
      HTTP_METHOD      = #{httpMethod},
      URL              = #{url},
      ENABLED          = #{enabled},
      AUTHOR_ID        = #{authorId},
      MODIFIED_TIME    = now(),
      SERVICE_GROUP_ID = #{serviceGroupId}
    WHERE ID = #{id}
  </update>

  <delete id="delete">
    DELETE FROM API_INFO
    WHERE ID = #{id}
  </delete>

  <select id="existsByName">
    SELECT EXISTS(
      SELECT 1
      FROM API_INFO
      <where>
        <if test="id != null">
          AND ID != #{id}
        </if>
        AND NAME = #{name}
      </where>
    )
  </select>

  <select id="existsByHttpMethodAndUrl">
    SELECT EXISTS(
      SELECT 1
      FROM API_INFO
      <where>
        <if test="id != null">
          AND ID != #{id}
        </if>
        AND HTTP_METHOD = #{httpMethod}
        AND URL = #{url}
      </where>
    )
  </select>
</mapper>
