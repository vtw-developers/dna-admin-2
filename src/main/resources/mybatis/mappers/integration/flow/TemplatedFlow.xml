<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.vtw.dna.integration.flow.repository.TemplatedFlowRepository">

    <resultMap id="query" type="com.vtw.dna.integration.flow.dto.TemplatedFlowQuery">
        <result column="REQUEST_PARAMETERS" property="requestParameters" typeHandler="RequestParametersJsonTypeHandler"/>
        <result column="RESPONSE_BODY" property="responseBody" typeHandler="DataSchemaViewJsonTypeHandler"/>
        <result column="PARAMETERS" property="parameters" typeHandler="ParameterValuesJsonTypeHandler"/>
    </resultMap>

    <select id="count">
        SELECT COUNT(*)
        FROM TEMPLATED_FLOW F
        <where>
            <if test="filter.name != null and filter.name != ''">
                AND F.NAME LIKE '%' || #{filter.name} || '%'
            </if>
        </where>
    </select>

    <select id="list" resultMap="query">
        SELECT
        F.SID,
        F.FLOW_ID,
        F.NAME,
        F.HTTP_METHOD,
        F.URL,
        T.SID AS TEMPLATE_SID,
        T.NAME AS TEMPLATE_NAME
        FROM TEMPLATED_FLOW F
        LEFT OUTER JOIN FLOW_TEMPLATE T
        ON F.TEMPLATE_SID = T.SID
        <where>
            <if test="filter.name != null and filter.name != ''">
                AND F.NAME LIKE '%' || #{filter.name} || '%'
            </if>
        </where>
        <if test="pageable.sort != null and !pageable.sort.isEmpty()">
            ORDER BY
            <foreach collection="pageable.sort" item="order" separator=",">
                <if test="order.property == 'name'">
                    F.NAME
                </if>
                ${order.direction}
            </foreach>
        </if>
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <select id="findById" resultMap="query">
        SELECT F.SID,
               F.FLOW_ID,
               F.NAME,
               F.HTTP_METHOD,
               F.URL,
               F.REQUEST_PARAMETERS,
               F.RESPONSE_BODY,
               F.PARAMETERS,
               T.SID        AS TEMPLATE_SID,
               T.NAME       AS TEMPLATE_NAME
        FROM TEMPLATED_FLOW F
                 LEFT OUTER JOIN FLOW_TEMPLATE T
                                 ON F.TEMPLATE_SID = T.SID
        WHERE F.SID = #{sid}
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="sid">
        INSERT INTO TEMPLATED_FLOW (
            FLOW_ID,
            NAME,
            HTTP_METHOD,
            URL,
            REQUEST_PARAMETERS,
            RESPONSE_BODY,
            TEMPLATE_SID,
            PARAMETERS
        )
        VALUES (
            #{flowId},
            #{name},
            #{httpMethod},
            #{url},
            #{requestParameters, typeHandler=RequestParametersJsonTypeHandler},
            #{responseBody, typeHandler=DataSchemaViewJsonTypeHandler},
            #{templateSid},
            #{parameters, typeHandler=ParameterValuesJsonTypeHandler}
        )
    </insert>

    <update id="update">
        UPDATE TEMPLATED_FLOW
        SET FLOW_ID      = #{flowId},
            NAME         = #{name},
            HTTP_METHOD  = #{httpMethod},
            URL          = #{url},
            REQUEST_PARAMETERS = #{requestParameters, typeHandler=RequestParametersJsonTypeHandler},
            RESPONSE_BODY = #{responseBody, typeHandler=DataSchemaViewJsonTypeHandler},
            TEMPLATE_SID = #{templateSid},
            PARAMETERS   = #{parameters, typeHandler=ParameterValuesJsonTypeHandler}
        WHERE SID = #{sid}
    </update>

    <delete id="delete">
        DELETE
        FROM TEMPLATED_FLOW
        WHERE SID = #{sid}
    </delete>

    <select id="existsByName">
        SELECT EXISTS(
        SELECT 1
        FROM TEMPLATED_FLOW
        <where>
            <if test="id != null">
                AND SID != #{sid}
            </if>
            AND NAME = #{name}
        </where>
        )
    </select>
</mapper>
